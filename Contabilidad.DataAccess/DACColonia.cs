/*
'===============================================================================
'  Company: IASD
'  Autor: Ingrid Alexis Soto Dimas
'  Date: 2013-09-17
'  **** Generated by MyGeneration Version # (1.3.0.3) ****
'===============================================================================
*/

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;
using Microsoft.ApplicationBlocks.Data;
using Contabilidad.Entity;

namespace Contabilidad.DataAccess
{
    public class DACColonia : Base
	{
        #region GetList
        public static DataTable GetList()
        {
            DataSet ds;

            SqlParameter[] arrPar = new SqlParameter[4];
            //arrPar[0] = new SqlParameter("@intEstado", SqlDbType.Int);
            //arrPar[0].Value = Ciudades.IntEstado;
            //arrPar[1] = new SqlParameter("@intMunicipio", SqlDbType.Int);
            //arrPar[1].Value = 0;

            try
            {
                ds = SqlHelper.ExecuteDataset(ConnectionString, CommandType.StoredProcedure, "usp_tbColonia_Sel");
                return ds.Tables[0];
            }
            catch (Exception e)
            {
                return null;
            }
        }
        #endregion

        #region List
        public static DataTable List(Entity_Colonia obj)
        {
            DataSet ds;

            SqlParameter[] arrPar = new SqlParameter[1];
            arrPar[0] = new SqlParameter("@intColonia", SqlDbType.Int);
            arrPar[0].Value = obj.intColonia;

            try
            {
                ds = SqlHelper.ExecuteDataset(ConnectionString, CommandType.StoredProcedure, "usp_tbColonia_Fill");
                return ds.Tables[0];
            }
            catch (Exception e)
            {
                return null;
            }
        }
        #endregion


        public static DataTable Data(Entity_Colonia obj)
        {
            DataSet ds;

            SqlParameter[] arrPar = new SqlParameter[4];
            arrPar[0] = new SqlParameter("@intEmpresa", SqlDbType.Int);
            arrPar[0].Value = obj.IntEmpresa;
            arrPar[1] = new SqlParameter("@intSucursal", SqlDbType.Int);
            arrPar[1].Value = obj.IntSucursal;
            arrPar[2] = new SqlParameter("@intColonia", SqlDbType.Int);
            arrPar[2].Value = obj.intColonia;
            arrPar[3] = new SqlParameter("@intActivo", SqlDbType.Int);
            arrPar[3].Value = obj.intActivo;

            try
            {
                ds = SqlHelper.ExecuteDataset(ConnectionString, CommandType.StoredProcedure, "qryColonia_Sel",arrPar );
                return ds.Tables[0];
            }
            catch (Exception e)
            {
                return null;
            }
        }


        #region Fill
        public static Entity_Colonia Fill(Entity_Colonia obj)
        {
            IDataReader drd;
            Entity_Colonia oEntity_Col;
            oEntity_Col = new Entity_Colonia();

            SqlParameter[] arrPar = new SqlParameter[1];
            arrPar[0] = new SqlParameter("@intColonia", SqlDbType.Int);
            arrPar[0].Value = obj.intColonia;


            try
            {
                drd = SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, "usp_tbColonia_Fill", arrPar);
                if (drd.Read())
                {
                    oEntity_Col = CreateObject(drd);
                }
            }
            catch (Exception e)
            {
                oEntity_Col = null;
            }

            return oEntity_Col;
        }
        #endregion        


        #region Sel
        public static Entity_Colonia Sel(Entity_Colonia obj)
        {
            IDataReader drd;
            Entity_Colonia oEntity_Col;
            oEntity_Col = new Entity_Colonia();

            SqlParameter[] arrPar = new SqlParameter[1];
            arrPar[0] = new SqlParameter("@intColonia", SqlDbType.Int);
            arrPar[0].Value = obj.intColonia;


            try
            {
                drd = SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, "usp_tbColonia_Sel", arrPar);
                if (drd.Read())
                {
                    oEntity_Col = CreateObject(drd);
                }
            }
            catch (Exception e)
            {
                oEntity_Col = null;
            }

            return oEntity_Col;
        }
        #endregion     

        #region Create
        static Entity_Colonia  CreateObject(IDataReader drd)
        {
            Entity_Colonia oEnt_Col;
            oEnt_Col = new Entity_Colonia();

            oEnt_Col.IntEmpresa = (int)drd["IntEmpresa"];
            oEnt_Col.intColonia = (int)drd["intColonia"];
            oEnt_Col.strNombre = (string)drd["strNombre"];
            oEnt_Col.strNombreCorto = (string)drd["strNombreCorto"];
            oEnt_Col.IntSucursal = (int)drd["intSucursal"];
            oEnt_Col.dblFactorMercado = (decimal )drd["dblFactorMercado"];
            oEnt_Col.dblPorcentajeIndirecto = (decimal)drd["dblPorcentajeIndirecto"];
            oEnt_Col.intTipoVivienda = (int)drd["intTipoVivienda"];
            oEnt_Col.intMunicipio = (int)drd["intMunicipio"];
            oEnt_Col.intEstado = (int)drd["intEstado"];
            oEnt_Col.strCP = (string)drd["strCP"];
            oEnt_Col.intArea = (int)drd["intArea"];
            oEnt_Col.intActivo = (int)drd["intActivo"];

            return oEnt_Col;
        }
        #endregion

        #region Retrieve
        public static Entity_Colonia Retrieve(Entity_Colonia obj)
        {
            IDataReader drd;
            Entity_Colonia oEntity_Colonia;
            oEntity_Colonia = new Entity_Colonia();

            try
            {
                SqlParameter[] arrPar = new SqlParameter[4];
                arrPar[0] = new SqlParameter("@intEmpresa", SqlDbType.Int);
                arrPar[0].Value = obj.IntEmpresa;
                arrPar[1] = new SqlParameter("@intSucursal", SqlDbType.Int);
                arrPar[1].Value = obj.IntSucursal;
                arrPar[2] = new SqlParameter("@intColonia", SqlDbType.Int);
                arrPar[2].Value = obj.intColonia ;
                arrPar[3] = new SqlParameter("@intActivo", SqlDbType.Int);
                arrPar[3].Value = obj.intActivo;

                drd = SqlHelper.ExecuteReader(ConnectionString, CommandType.StoredProcedure, "qryColonia_Sel", arrPar);
                if (drd.Read())
                {
                    oEntity_Colonia = CreateObject(drd);
                }
            }
            catch (Exception e)
            {
                oEntity_Colonia = null;
            }

            return oEntity_Colonia;

        }
        #endregion


        public static string Save(Entity_Colonia obj)
        {
            string result;

            SqlParameter[] arrPar = new SqlParameter[15];
            arrPar[0] = new SqlParameter("@intEmpresa", SqlDbType.Int);
            arrPar[0].Value = obj.IntEmpresa;
            arrPar[1] = new SqlParameter("@intSucursal", SqlDbType.Int);
            arrPar[1].Value = obj.IntSucursal;
            arrPar[2] = new SqlParameter("@intColonia", SqlDbType.VarChar);
            arrPar[2].Value = obj.intColonia;
            arrPar[3] = new SqlParameter("@strNombre", SqlDbType.VarChar);
            arrPar[3].Value = obj.strNombre;
            arrPar[4] = new SqlParameter("@strNombreCorto", SqlDbType.VarChar);
            arrPar[4].Value = obj.strNombreCorto;
            arrPar[5] = new SqlParameter("@dblFactorMercado", SqlDbType.Decimal );
            arrPar[5].Value = obj.dblFactorMercado;
            arrPar[6] = new SqlParameter("@dblPorcentajeIndirecto", SqlDbType.Decimal );
            arrPar[6].Value = obj.dblPorcentajeIndirecto;
            arrPar[7] = new SqlParameter("@intTipoVivienda", SqlDbType.Int );
            arrPar[7].Value = obj.intTipoVivienda;
            arrPar[8] = new SqlParameter("@intMunicipio", SqlDbType.Int );
            arrPar[8].Value = obj.intMunicipio;
            arrPar[9] = new SqlParameter("@intEstado", SqlDbType.Int);
            arrPar[9].Value = obj.intEstado;
            arrPar[10] = new SqlParameter("@strCP", SqlDbType.VarChar );
            arrPar[10].Value = obj.strCP;
            arrPar[11] = new SqlParameter("@intArea", SqlDbType.Int );
            arrPar[11].Value = obj.intArea;
            arrPar[12] = new SqlParameter("@intActivo", SqlDbType.Int);
            arrPar[12].Value = obj.intActivo;
            arrPar[13] = new SqlParameter("@strUsuario", SqlDbType.VarChar);
            arrPar[13].Value = obj.StrUsuario;
            arrPar[14] = new SqlParameter("@strMaquina", SqlDbType.VarChar);
            arrPar[14].Value = obj.StrMaquina;
            try
            {
                //result = SqlHelper.ExecuteScalar(ConnectionString, CommandType.StoredProcedure, "qryColonia_App", arrPar).ToString();
                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, "qryColonia_App", arrPar);
                result = "true";
            }
            catch (Exception e)
            {
                throw e;
            }
            return result;
        }

        public static bool Delete(Entity_Colonia obj)
        {
            bool flag;

            SqlParameter[] arrPar = new SqlParameter[3];
            arrPar[0] = new SqlParameter("@intEmpresa", SqlDbType.Int);
            arrPar[0].Value = obj.IntEmpresa;
            arrPar[1] = new SqlParameter("@intSucursal", SqlDbType.Int);
            arrPar[1].Value = obj.IntSucursal;
            arrPar[2] = new SqlParameter("@intColonia", SqlDbType.VarChar);
            arrPar[2].Value = obj.intColonia;

            try
            {
                //int intColonia = ((Colonia)colonia).IntColonia;
                //ActionQuery("qryColonia_Del " + getValue(empresa) + "," + getValue(sucursal) + "," + getValue(intColonia));
                //flag = true;

                SqlHelper.ExecuteNonQuery(ConnectionString, CommandType.StoredProcedure, "qryColonia_Del", arrPar);
                flag = true;
            }
            catch (Exception e)
            {
                throw e;
            }
            return flag;
        }

        public static uint SiguienteFolio(Entity_Colonia obj)
        {
            uint ui;

            SqlParameter[] arrPar = new SqlParameter[3];
            arrPar[0] = new SqlParameter("@intEmpresa", SqlDbType.Int);
            arrPar[0].Value = obj.IntEmpresa;
            arrPar[1] = new SqlParameter("@intSucursal", SqlDbType.Int);
            arrPar[1].Value = obj.IntSucursal;

            try
            {
                ui = Convert.ToUInt32(SqlHelper.ExecuteScalar(ConnectionString, CommandType.StoredProcedure, "usp_siguienteFolioColonia",arrPar ).ToString());
            }
            catch (Exception e)
            {
                throw e;
            }
            return ui;
        }

        public static string GetColonia(string strObras)
        {
            string result = "";

            try
            {

                string query = @"DECLARE @Colonias VARCHAR(300); SELECT @Colonias = COALESCE(@Colonias + ', ', '') + strNombre FROM tbColonia WHERE intColonia IN (SELECT intColonia FROM tbObra WHERE intObra IN (" + strObras + @")); SELECT @Colonias;";

                result = SqlHelper.ExecuteScalar(ConnectionString, CommandType.Text, query).ToString();
            }
            catch (Exception e)
            {

                result = e.Message;
            }

            return result;
        }

        public static string GetCasas(string strObras)
        {
            string result = "";

            try
            {

                string query = @"SELECT count(l.intobra) FROM tbLote l inner join tbprospecto p on l.intlote = p.intlote WHERE intObra in(" + strObras + ") ";

                result = SqlHelper.ExecuteScalar(ConnectionString, CommandType.Text, query).ToString();
            }
            catch (Exception e)
            {

                result = e.Message;
            }

            return result;
        }

       

        public static DataTable GetTableArticuloControlRep(string intObra, string drPartida)
        {
            DataSet ds;

            SqlParameter[] arrPar = new SqlParameter[2];
            arrPar[0] = new SqlParameter("@intObra", SqlDbType.Int);
            arrPar[0].Value = Convert.ToInt32(intObra);
            arrPar[1] = new SqlParameter("@intPartida", SqlDbType.Int);
            arrPar[1].Value = Convert.ToInt32(drPartida);

            try
            {
                ds = SqlHelper.ExecuteDataset(ConnectionString, CommandType.StoredProcedure, "VetecMarfil..usp_tbPUTarjetaArticuloControl_Rep_MOSUB", arrPar);
                //DALHelper.GetTableFromQuery("usp_tbPUTarjetaArticuloControl_Rep_MOSUB " + intObra.ToString() + "," + drPartida["intPartida"].ToString());
                return ds.Tables[0];
            }
            catch (Exception e)
            {
                return null;
            }
        }
        public static DataTable GetTableTrarjetaPartidaRep(string intObra, string drPartida)
        {
            DataSet ds;

            SqlParameter[] arrPar = new SqlParameter[2];
            arrPar[0] = new SqlParameter("@intObra", SqlDbType.Int);
            arrPar[0].Value = Convert.ToInt32(intObra);
            arrPar[1] = new SqlParameter("@intPartida", SqlDbType.Int);
            arrPar[1].Value = Convert.ToInt32(drPartida);

            try
            {
                ds = SqlHelper.ExecuteDataset(ConnectionString, CommandType.StoredProcedure, "VetecMarfil..usp_tbPUTarjetaPartida_Rep", arrPar);
                //DALHelper.GetTableFromQuery("usp_tbPUTarjetaArticuloControl_Rep_MOSUB " + intObra.ToString() + "," + drPartida["intPartida"].ToString());
                return ds.Tables[0];
            }
            catch (Exception e)
            {
                return null;
            }
        }
    }
}
